#!/usr/bin/perl -w

#  XML I18N Desktop File Prepare Tool
#
#  Copyright (C) 2001 Free Software Foundation.
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  This script is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this library; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Author(s): Gediminas Paulauskas <menesis@delfi.lt>

## Release information
my $PROGRAM  = "xml-i18n-prepare";
my $PACKAGE  = "xml-i18n-tools";
my $VERSION  = "0.6";

## Loaded modules
# FIXME: use strict;
use Getopt::Long;
use File::Find;

## Scalars used by the option stuff
my $HELP_ARG    = "0";
my $VERSION_ARG = "0";
my $VERBOSE     = "0";

my @languages;
my @desktop_files;

my $desktop_extension = "(desktop|soundlist|keys|directory)+";
my $desktop_find_regex = ".*desktop\\|soundlist\\|keys\\|directory";

## Always print as the first thing
$| = 1;

## Handle options
GetOptions (
            "help|h|?"          => \$HELP_ARG,
            "version|v"         => \$VERSION_ARG,
            "verbose|x"         => \$VERBOSE
            ) or &invalid_option;


## Use the supplied arguments
## Check for options.
## This section will check for the different options.

sub split_on_argument {

    if ($VERSION_ARG) {
        &version;

    } elsif ($HELP_ARG) {
        &help;

    } else {
        &main;
    }
}

&split_on_argument;

sub main
{
    print "Working, please wait...\n" if (! $VERBOSE);
    &find_desktop_files;
    &add_to_potfiles;
    &perform_rescue;
    &add_to_cvsignore;
    &generate_empty;
}

sub version{

    ## Print version information
    print "${PROGRAM} ${PACKAGE} $VERSION\n";
    print "Written by Gediminas Paulauskas <menesis\@delfi.lt>, 2000.\n\n";
    print "Copyright (C) 2000 Free Software Foundation, Inc.\n";
    print "This is free software; see the source for copying conditions.  There is NO\n";
    print "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n";
    exit;
}

sub help
{
    ## Print usage information
    print "Usage: ${PROGRAM} [OPTION]\n";
    print "Updates pot files and merge them with the translations.\n\n";
    print "  -H, --help                 shows this help page\n";
    print "  -X, --verbose              show lots of feedback\n";
    print "  -V, --version              shows the version\n";
    print "Report bugs to <menesis\@delfi.lt>.\n";
    exit;
}

sub invalid_option
{
    ## Handle invalid arguments
    ## my $opt = $ARGV[0];
    ## print "${PROGRAM}: invalid option -- $opt\n";
    print "Try `${PROGRAM} --help' for more information.\n";
    exit 1;
}

sub add_to_potfiles
{
    open FILE, ">>po/POTFILES.in";
    my $intro = 0;
    foreach $desktop (@desktop_files) {
        next if contains("po/POTFILES.in", "$desktop.in");
# Print explanation comment only once
        unless ($intro) {
           print FILE "# files added by xml-i18n-prepare\n";
           $intro = 1;
        }
        print FILE "$desktop.in\n";
    }
    close FILE;
}

sub perform_rescue
{
    my $file;
    foreach $file (@desktop_files) {
        &rescue_file($file);
    }
}

sub rescue_file
{
    my ($filename) = @_;
    my ($msgid, $line, $lang);

    print "Rescuing translations from $filename ...\n" if $VERBOSE;

    open ORIG, "<$filename";
    $line = 1;
    while (<ORIG>) {
        chomp;
        $line++;
	    $entry = $_;
        if ($entry =~ /^(Name|Comment|\s*description)=(.*)$/) {
            $msgid = $2;
	        $msgid =~ s/\"/\\"/;
        } elsif (
		         ($entry =~ /^(Name|Comment|description)\[(.*?)\]=(.*)$/) ||
        	     ($entry =~ /^(\s*\[)(.*?)\]description=(.*)$/)
		        ) {
            $lang = $2;
            next if (!-s "po/$lang.po");

            $msgstr = $3;
            $msgstr =~ s/"/\\"/g;
	    
            next if contains("po/$lang.po", "msgstr \"$msgstr\"");
            
            open POFILE, ">>po/$lang.po";

            print POFILE "\n#: $filename:$line\n";
            print POFILE "msgid \"$msgid\"\n";
            print POFILE "msgstr \"$msgstr\"\n";

            close POFILE;
            $line--;
        }
    }
}

sub generate_empty
{
    my $all = ' ';
    foreach $full (@desktop_files) {
        $new = "$full.in";
        $all .= "$new ";
	    print "Generating empty $new ...\n" if $VERBOSE;
        open FULL, "<$full";
        open NEW, ">$new";

        while (<FULL>) {
            unless (
		            (/^(Name|Comment|description)\[.*?\]=.*$/) ||
        	        (/^\s*\[(.*?)\]description=.*$/)
		           ) {
                if (/^(Name|Comment)=.*$/) {
                    print NEW "_$_";
                } elsif (/^(\s*)(description=.*)$/) {
                    print NEW "$1_$2\n";
                } else {
                    print NEW;
                }
	        }
        }

        close NEW;
    }
    print "*** Please add these files to CVS by following command: ***\n"
        . "cvs add$all\n";
}

sub add_to_cvsignore
{
    my $all = ' ';
    my $ign;
    foreach $file (@desktop_files) {
        $file =~ /^(.*\/)*(.*?\.$desktop_extension$)$/;
        if ($1) {
            $ign = "$1.cvsignore";
        } else {
            $ign = ".cvsignore";
        }
        $basename = $2;

        next if contains($ign, $basename);
	    
        print "Appending $basename to $ign\n" if $VERBOSE;
        open FILE, ">>$ign";
        print FILE "$basename\n";
        $all .= "$file ";
    }
    close FILE;
    unless ($all eq ' ') {
        print "*** Please remove files from CVS by following command: ***\n"
            . "cvs remove -f$all\n";
    }
}

sub contains
{
    my ($name, $expr) = @_;
    open CONT, "<$name";
    while (<CONT>) {
         return 1 if /^$expr$/;
    }
    return 0;
}

sub find_desktop_files
{
    if ($VERBOSE) {
        print "Found these interesting files:\n";
    } else {
        print "Finding interesting files...";
    }
    find (\&wanted, '.');
    print "done\n" unless $VERBOSE;
}

sub wanted
{
    if (/$desktop_extension$/) {
        my $file = $File::Find::name;
        $file =~ s/\.\///;
        push @desktop_files, $file;
        print "$file\n" if $VERBOSE;
    }
}

# vim: ts=4 sw=4 expandtab
